(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>p});var o=t(537),r=t.n(o),i=t(645),a=t.n(i),d=t(667),s=t.n(d),c=new URL(t(131),t.b),l=a()(r()),u=s()(c);l.push([e.id,"* {\n\n    margin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n\n\n#container {\n    box-sizing: border-box;\n    width: 100vw;\n    height: 100vh;\n    background-image: url("+u+");\n    background-size: cover;\n}\n\n\n#tasks-div {\n\n    background-color: maroon;\n    color: honeydew;\n\n}\n\n\n#new-task-button {\n\n    border-radius: 25%;\n\n    width: 15vw;\n    height: 10vh;\n}\n\n.task-element {\n\n    padding-top: 4vh;\n    padding-bottom: 4vh;\n    border: 1px solid gold;\n    display: flex;\n    justify-content: space-between;\n}\n\n.description-div {\n    width: 10vw;\n    word-wrap: break-word;\n}\n\n.due-date-field {\n    height: 10%;\n    border: 0.3rem solid goldenrod;\n}\n\n.priority-dropdown {\n    height: 10%;\n    border: 0.3rem solid goldenrod;\n\n\n}\n.hide-button {\n    height: 10%;\n    border: 0.3rem solid goldenrod;\n\n    background-color: aqua;\n}\n\n.delete-button {\n    height: 10%;\n    background-color: indigo;\n    border: 0.3rem solid red;\n    color: honeydew ;\n\n    margin-right: 10%;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;IAEI,SAAS;CACZ,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;;;AAGA;IACI,sBAAsB;IACtB,YAAY;IACZ,aAAa;IACb,yDAAuC;IACvC,sBAAsB;AAC1B;;;AAGA;;IAEI,wBAAwB;IACxB,eAAe;;AAEnB;;;AAGA;;IAEI,kBAAkB;;IAElB,WAAW;IACX,YAAY;AAChB;;AAEA;;IAEI,gBAAgB;IAChB,mBAAmB;IACnB,sBAAsB;IACtB,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,WAAW;IACX,qBAAqB;AACzB;;AAEA;IACI,WAAW;IACX,8BAA8B;AAClC;;AAEA;IACI,WAAW;IACX,8BAA8B;;;AAGlC;AACA;IACI,WAAW;IACX,8BAA8B;;IAE9B,sBAAsB;AAC1B;;AAEA;IACI,WAAW;IACX,wBAAwB;IACxB,wBAAwB;IACxB,gBAAgB;;IAEhB,iBAAiB;AACrB",sourcesContent:["* {\n\n    margin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n\n\n#container {\n    box-sizing: border-box;\n    width: 100vw;\n    height: 100vh;\n    background-image: url('background.png');\n    background-size: cover;\n}\n\n\n#tasks-div {\n\n    background-color: maroon;\n    color: honeydew;\n\n}\n\n\n#new-task-button {\n\n    border-radius: 25%;\n\n    width: 15vw;\n    height: 10vh;\n}\n\n.task-element {\n\n    padding-top: 4vh;\n    padding-bottom: 4vh;\n    border: 1px solid gold;\n    display: flex;\n    justify-content: space-between;\n}\n\n.description-div {\n    width: 10vw;\n    word-wrap: break-word;\n}\n\n.due-date-field {\n    height: 10%;\n    border: 0.3rem solid goldenrod;\n}\n\n.priority-dropdown {\n    height: 10%;\n    border: 0.3rem solid goldenrod;\n\n\n}\n.hide-button {\n    height: 10%;\n    border: 0.3rem solid goldenrod;\n\n    background-color: aqua;\n}\n\n.delete-button {\n    height: 10%;\n    background-color: indigo;\n    border: 0.3rem solid red;\n    color: honeydew ;\n\n    margin-right: 10%;\n}"],sourceRoot:""}]);const p=l},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var d=0;d<this.length;d++){var s=this[d][0];null!=s&&(a[s]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);o&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),n.push(l))}},n}},667:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */"),a=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(a).concat([i]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var i={},a=[],d=0;d<e.length;d++){var s=e[d],c=o.base?s[0]+o.base:s[0],l=i[c]||0,u="".concat(c," ").concat(l);i[c]=l+1;var p=t(u),A={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)n[p].references++,n[p].updater(A);else{var h=r(A,o);o.byIndex=d,n.splice(d,0,{identifier:u,updater:h,references:1})}a.push(u)}return a}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var d=t(i[a]);n[d].references--}for(var s=o(e,r),c=0;c<i.length;c++){var l=t(i[c]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}i=s}}},569:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},131:(e,n,t)=>{e.exports=t.p+"d43dd6d9a6c56b6c56d5.png"}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var i=n[o]={id:o,exports:{}};return e[o](i,i.exports,t),i.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");o.length&&(e=o[o.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,(()=>{var e=t(379),n=t.n(e),o=t(795),r=t.n(o),i=t(569),a=t.n(i),d=t(565),s=t.n(d),c=t(216),l=t.n(c),u=t(589),p=t.n(u),A=t(426),h={};h.styleTagTransform=p(),h.setAttributes=s(),h.insert=a().bind(null,"head"),h.domAPI=r(),h.insertStyleElement=l(),n()(A.Z,h),A.Z&&A.Z.locals&&A.Z.locals;let g=JSON.parse(localStorage.getItem("tasks"));function f(e,n="No description yet",t=new Date,o="",r=""){console.log("new task pressed");let i=Object.create(f.proto);return i.name=e,i.description=n,i.dueDate=t,i.priority=o,i.notes=r,i.done=!1,g.push(i),i.id=g.length,localStorage.setItem("tasks",JSON.stringify(g)),k(),i}null==g&&(g=[]),f.proto={changeDoneStatus:function(){this.done?this.done=!1:this.done=!0}};let m=document.getElementById("container"),b=document.createElement("button"),v=document.createElement("div"),C=document.createElement("ul");function k(){if(C.innerHTML="",null==g||0==g.length)C.innerHTML="Nothing on your to-do list yet";else{let e=0;for(;e<g.length;){let n=document.createElement("div");n.innerHTML=`${g[e].name}`,C.appendChild(n),n.task=g[e],n.isExpanded=!1,n.setAttribute("class","task-element"),n.addEventListener("click",(function(){y(n)})),e++}}}function y(e){if(console.log(`clicked task ${e.task.name}, id ${e.task.id}`),!e.isExpanded){e.style.height="50vh",function(e){let n=document.createElement("div");n.setAttribute("class","description-div"),n.innerHTML=e.task.description,n.addEventListener("click",(function(){!function(e,n){console.log("task description clicked");let t=document.createElement("div");t.setAttribute("class","clicked-task-description");let o=document.createElement("input");o.setAttribute("type","text"),o.defaultValue=n.task.description,console.log(1),console.log(12);let r=document.createElement("button");r.innerHTML="Update description",r.addEventListener("click",(function(){!function(e,n,t){console.log("update description clicked: "+t.value),console.log(n.innerHTML),e.task.description=t.value,console.log(e.task.description),document.getElementsByClassName("clicked-task-description").innerHTML="",w(e),console.log("rebuilding task desc"),k()}(n,e,o)})),t.appendChild(o),t.appendChild(r),console.log(13),e.replaceWith(t)}(n,e)})),e.appendChild(n),e.isExpanded=!0}(e),e.isExpanded=!0;let n=document.createElement("input");n.setAttribute("type","date"),n.setAttribute("class","due-date-field"),n.defaultValue=e.task.dueDate,e.appendChild(n),n.addEventListener("input",(t=>{e.task.dueDate=n.value}));let t=document.createElement("select");t.setAttribute("class","priority-dropdown");let o=document.createElement("option");o.value="High",o.innerHTML="High",t.appendChild(o);let r=document.createElement("option");t.appendChild(r),r.value="Low",r.innerHTML="Low",t.defaultValue=e.task.priority,"High"==e.task.priority?o.selected="selected":r.selected="selected",e.appendChild(t),t.addEventListener("input",(n=>{e.task.priority=t.value}));let i=document.createElement("button");i.innerHTML="hide",i.setAttribute("class","hide-button"),e.appendChild(i),i.setAttribute("onclick","event.stopPropagation()"),i.addEventListener("click",(function(){w(e)}));let a=document.createElement("button");a.innerHTML="delete",a.setAttribute("class","delete-button"),e.appendChild(a),a.addEventListener("click",(n=>{let t=g.find((n=>n.id==e.task.id));console.log(`deleting task ${t.name}, id: ${t.id}`);let o=g.indexOf(t);o>-1&&(g.splice(o,1),k()),localStorage.setItem("tasks",JSON.stringify(g))}))}}function w(e){e.isExpanded&&(e.style.height="",e.innerHTML=e.task.name,e.isExpanded=!1)}b.innerHTML="Create a new task",b.setAttribute("id","new-task-button"),b.addEventListener("click",(function(){f(prompt("What is the task's name?"))})),m.appendChild(b),m.appendChild(v),v.setAttribute("id","tasks-div"),k(),v.appendChild(C)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,